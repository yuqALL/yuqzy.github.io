<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuq&#39;s blog</title>
  
  <subtitle>Learning Code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-25T08:30:46.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yuqZY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图像匹配问题</title>
    <link href="http://yoursite.com/3D_Vision_4/"/>
    <id>http://yoursite.com/3D_Vision_4/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-10-25T08:30:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图像匹配问题"><a href="#图像匹配问题" class="headerlink" title="图像匹配问题"></a>图像匹配问题</h1><hr><h2 id="Chapter-4-Image-primitives-and-correspondence"><a href="#Chapter-4-Image-primitives-and-correspondence" class="headerlink" title="Chapter 4 Image primitives and correspondence"></a>Chapter 4 Image primitives and correspondence</h2><blockquote><p>本部分主要讲述图像匹配问题,研究如何从图像反过来重建3D场景。这是一个非常复杂的过程，往往是无法从一张图像复原3D场景的，在后续的内容将会介绍到的双目视觉及多目视觉可以在一定程度解决问题。</p></blockquote><p>一张图片往往由环境的 <strong>几何信息（geometry of the scene）</strong> 和 <strong>光线分布（light distribution）</strong> 共同组成，这两者在单一图片中往往是难以分割的，我们不能将他们分开来单独讨论。一个物体可以由特定的光线分布构成一幅图像，而另一个物体通过另一种光线分布可能形成与前面相同的图像（个人理解，这里可以想象一下镜子），很简单的例子就是形成的图像本身。物体形成的图像与人眼看到的真实世界几乎一致，但却不是真实的世界。</p><p>但是对同一场景，如果我们可以从不同的角度、位置拍摄图像，那么我们就有可能从多张图片中获取场景的几何信息。实际上，虽然每幅图像由相机的位置决定，但是场景的几何信息和光线分布是不变的（假设拍摄期间场景没有变化）。当我们从不同的角度观察时，很容易观察到场景图像的变化：远处的物体移动慢，近处物体移动快。但是当我们将相机对着平面图像运动时，我们会发现所有点朝着相同的方向移动。这是因为3D场景比平面图像多了一个维度信息，一般称作<strong>深度信息</strong>。</p><p>从上述过程中，我们可以直观的感受到，要想从图片中重建三维世界，我们必须对同一场景拍摄多张图片。但是，对于同一场景不同图片上的点，如何建立它们之间的对应关系？这是重建场景的核心问题，被称为<strong>匹配问题（correspondence problem）</strong>。</p><p>对于大部分场景而言，上述问题往往是无解的。如果图像之间的光线分布和几何信息可以随意改变，那么将没有办法建立不同图像上点之间的对应关系。例如，我们让一个白色的大理石球体旋转，每张图片几乎都一样，那怎么建立匹配呢？那如果这里改成静止的镜面反射的球体，让光源移动，尽管物体上的点是静止的，但是不同的图片上看见的外观一点都不一样。甚至如果光线和几何信息都保持不变，而物体的表面具有各向异性的反射特性，以至于从不同的视角看到不一样形貌，建立匹配将会非常的困难。</p><blockquote><p>本节内容就是聚焦在<strong>什么样的情况下，匹配问题能够解决</strong>，并且是十分容易解决的。</p></blockquote><h3 id="4-1-Correspondence-between-images"><a href="#4-1-Correspondence-between-images" class="headerlink" title="4.1 Correspondence between images"></a>4.1 Correspondence between images</h3><blockquote><p>在一幅图像中重点标出一个点（3D point），并在另一幅图像中找到这个点，这就是建立匹配模型要达到的目标。</p></blockquote><p>假设有一幅图像标记为$I_1$，在电脑中常常表现为一个二维矩阵，将这个二维区域记作$\Omega$，其内的值记作$I(x)$(强度 irradiance)(x表示像素位置，一般是一个矢量)，$I(x)$一般是一个正数。故可以如下的关系：<br>$$ I_1 : \Omega \subset R^2 \rightarrow R_+ $$ $$ x \mapsto I(x)$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;图像匹配问题&quot;&gt;&lt;a href=&quot;#图像匹配问题&quot; class=&quot;headerlink&quot; title=&quot;图像匹配问题&quot;&gt;&lt;/a&gt;图像匹配问题&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;Chapter-4-Image-primitives-and-correspondenc
      
    
    </summary>
    
      <category term="language" scheme="http://yoursite.com/categories/language/"/>
    
      <category term="c++" scheme="http://yoursite.com/categories/language/c/"/>
    
    
      <category term="math" scheme="http://yoursite.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>htmlcleaner代码学习</title>
    <link href="http://yoursite.com/htmlcleaner/"/>
    <id>http://yoursite.com/htmlcleaner/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-10-25T08:19:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="htmlcleaner代码学习"><a href="#htmlcleaner代码学习" class="headerlink" title="htmlcleaner代码学习"></a>htmlcleaner代码学习</h2><p>相比Jsoup，htmlcleaner支持XPath进行抽取，也是挺有用的。</p><p>htmlcleaner托管在sourceforge下<a href="http://htmlcleaner.sourceforge.net/‎" target="_blank" rel="noopener">http://htmlcleaner.sourceforge.net/‎</a>，由于某种原因，访问sourceforge不是那么顺畅，最后选了这个比较新的github上的fork:<a href="https://github.com/amplafi/htmlcleaner" target="_blank" rel="noopener">https://github.com/amplafi/htmlcleaner</a>。</p><p>htmlcleaner的包结构与Jsoup还是有些差距，一开始就被一字排开的类给吓到了。</p><p>htmlcleaner仍然有一套自己的树结构，继承自:<code>HtmlNode</code>。但是它提供了到<code>org.w3c.dom.Document</code>和<code>org.jdom2.Document</code>的转换。</p><p><code>HtmlTokenizer</code>是词法分析部分，有状态但是没用状态机，而是用了一些基本类型来保存状态，例如：</p><pre><code>public class HtmlTokenizer {    private BufferedReader _reader;    private char[] _working = new char[WORKING_BUFFER_SIZE];    private transient int _pos;    private transient int _len = -1;    private transient int _row = 1;    private transient int _col = 1;    private transient StringBuffer _saved = new StringBuffer(512);    private transient boolean _isLateForDoctype;    private transient DoctypeToken _docType;    private transient TagToken _currentTagToken;    private transient List&lt;BaseToken&gt; _tokenList = new ArrayList&lt;BaseToken&gt;();    private transient Set&lt;String&gt; _namespacePrefixes = new HashSet&lt;String&gt;();    private boolean _asExpected = true;    private boolean _isScriptContext;}</code></pre><p>浓烈的面向过程编程的味道。</p><p><code>Tokenize</code>之后就是简单的用栈将树组合起来。</p><p>测试了一下，一个44k的文档，用Jsoup做parse是3.5ms，而htmlcleaner是7.9ms，差距在一倍左右。</p><p>XPath部分也是云里雾里，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;htmlcleaner代码学习&quot;&gt;&lt;a href=&quot;#htmlcleaner代码学习&quot; class=&quot;headerlink&quot; title=&quot;htmlcleaner代码学习&quot;&gt;&lt;/a&gt;htmlcleaner代码学习&lt;/h2&gt;&lt;p&gt;相比Jsoup，htmlcleane
      
    
    </summary>
    
      <category term="language" scheme="http://yoursite.com/categories/language/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/language/java/"/>
    
    
      <category term="javaCode" scheme="http://yoursite.com/tags/javaCode/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup代码解读之二-DOM相关对象</title>
    <link href="http://yoursite.com/jsoup%20learning%202/"/>
    <id>http://yoursite.com/jsoup learning 2/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-10-25T15:49:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jsoup代码解读之二-DOM相关对象"><a href="#Jsoup代码解读之二-DOM相关对象" class="headerlink" title="Jsoup代码解读之二-DOM相关对象"></a>Jsoup代码解读之二-DOM相关对象</h2><p>之前在文章中说到，Jsoup使用了一套自己的DOM对象体系，和Java XML API互不兼容。这样做的好处是从XML的API里解脱出来，使得代码精炼了很多。这篇文章会说明Jsoup的DOM结构，DOM的遍历方式。在下一篇文章，我会并结合这两个基础，分析一下Jsoup的HTML输出功能。</p><h2 id="DOM结构相关类"><a href="#DOM结构相关类" class="headerlink" title="DOM结构相关类"></a>DOM结构相关类</h2><p>我们先来看看nodes包的类图：</p><p><img src="http://static.oschina.net/uploads/space/2013/0825/221021_wQvT_190591.png" alt="node类图"></p><p>这里可以看到，核心无疑是<code>Node</code>类。</p><p>Node类是一个抽象类，它代表DOM树中的一个节点，它包含：</p><ul><li>父节点<code>parentNode</code>以及子节点<code>childNodes</code>的引用</li><li>属性值集合<code>attributes</code></li><li>页面的uri<code>baseUri</code>，用于修正相对地址为绝对地址</li><li>在兄弟节点中的位置<code>siblingIndex</code>，用于进行DOM操作</li></ul><p>Node里面包含一些获取属性、父子节点、修改元素的方法，其中比较有意思的是<code>absUrl()</code>。我们知道，在很多html页面里，链接会使用相对地址，我们有时会需要将其转变为绝对地址。Jsoup的解决方案是在attr()的参数开始加”abs:”，例如attr(“abs:href”)，而<code>absUrl()</code>就是其实现方式。我写的爬虫框架<a href="http://www.oschina.net/p/webmagic" target="_blank" rel="noopener">webmagic</a>里也用到了类似功能，当时是自己手写的，看到Jsoup的实现，才发现自己是白费劲了，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">URL base;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        base = <span class="keyword">new</span> URL(baseUri);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">        <span class="comment">// the base is unsuitable, but the attribute may be abs on its own, so try that</span></span><br><span class="line">        URL abs = <span class="keyword">new</span> URL(relUrl);</span><br><span class="line">        <span class="keyword">return</span> abs.toExternalForm();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired</span></span><br><span class="line">    <span class="keyword">if</span> (relUrl.startsWith(<span class="string">"?"</span>))</span><br><span class="line">        relUrl = base.getPath() + relUrl;</span><br><span class="line">    <span class="comment">// java URL自带的相对路径解析    </span></span><br><span class="line">    URL abs = <span class="keyword">new</span> URL(base, relUrl);</span><br><span class="line">    <span class="keyword">return</span> abs.toExternalForm();</span><br><span class="line">&#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Node还有一个比较值得一提的方法是<code>abstract String nodeName()</code>，这个相当于定义了节点的类型名(例如<code>Document</code>是’#Document’，<code>Element</code>则是对应的TagName)。</p><p>Element也是一个重要的类，它代表的是一个HTML元素。它包含一个字段<code>tag</code>和<code>classNames</code>。classNames是”class”属性解析出来的集合，因为CSS规范里，”class”属性允许设置多个，并用空格隔开，而在用Selector选择的时候，即使只指定其中一个，也能够选中其中的元素。所以这里就把”class”属性展开了。Element还有选取元素的入口，例如<code>select</code>、<code>getElementByXXX</code>，这些都用到了select包中的内容，这个留到下篇文章select再说。</p><p>Document是代表整个文档，它也是一个特殊的Element，即根节点。Document除了Element的内容，还包括一些输出的方法。</p><p>Document还有一个属性<code>quirksMode</code>，大致意思是定义处理非标准HTML的几个级别，这个留到以后分析parser的时候再说。</p><h2 id="DOM树的遍历"><a href="#DOM树的遍历" class="headerlink" title="DOM树的遍历"></a>DOM树的遍历</h2><p>Node还有一些方法，例如<code>outerHtml()</code>，用作节点及文档HTML的输出，用到了树的遍历。在DOM树的遍历上，用到了<code>NodeVisitor</code>和<code>NodeTraversor</code>来对树的进行遍历。<code>NodeVisitor</code>在上一篇文章提到过了，head()和tail()分别是遍历开始和结束时的方法，而<code>NodeTraversor</code>的核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">    Node node = root;</span><br><span class="line">    <span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里对树进行后序(深度优先)遍历</span></span><br><span class="line">    <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//开始遍历node</span></span><br><span class="line">        visitor.head(node, depth);</span><br><span class="line">        <span class="keyword">if</span> (node.childNodeSize() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            node = node.childNode(<span class="number">0</span>);</span><br><span class="line">            depth++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//没有下一个兄弟节点，退栈</span></span><br><span class="line">            <span class="keyword">while</span> (node.nextSibling() == <span class="keyword">null</span> &amp;&amp; depth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                visitor.tail(node, depth);</span><br><span class="line">                node = node.parent();</span><br><span class="line">                depth--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//结束遍历</span></span><br><span class="line">            visitor.tail(node, depth);</span><br><span class="line">            <span class="keyword">if</span> (node == root)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            node = node.nextSibling();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用循环+回溯来替换掉了我们常用的递归方式，从而避免了栈溢出的风险。</p><p>实际上，Jsoup的Selector机制也是基于<code>NodeVisitor</code>来实现的，可以说<code>NodeVisitor</code>是更加底层和灵活的API。</p><p>在下一篇博客我会讲讲Document的输出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jsoup代码解读之二-DOM相关对象&quot;&gt;&lt;a href=&quot;#Jsoup代码解读之二-DOM相关对象&quot; class=&quot;headerlink&quot; title=&quot;Jsoup代码解读之二-DOM相关对象&quot;&gt;&lt;/a&gt;Jsoup代码解读之二-DOM相关对象&lt;/h2&gt;&lt;p&gt;之前
      
    
    </summary>
    
      <category term="language" scheme="http://yoursite.com/categories/language/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/language/java/"/>
    
    
      <category term="javaCode" scheme="http://yoursite.com/tags/javaCode/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup代码解读之一-概述</title>
    <link href="http://yoursite.com/jsoup%20learning%201/"/>
    <id>http://yoursite.com/jsoup learning 1/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-10-25T15:44:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jsoup代码解读之一-概述"><a href="#Jsoup代码解读之一-概述" class="headerlink" title="Jsoup代码解读之一-概述"></a>Jsoup代码解读之一-概述</h2><blockquote><p>今天看到一个用python写的抽取正文的东东，美滋滋的用Java实现了一番，放到了webmagic里，然后发现Jsoup里已经有了…觉得自己各种不靠谱啊！算了，静下心来学学好东西吧！</p></blockquote><p>Jsoup是Java世界用作html解析和过滤的不二之选。支持将html解析为DOM树、支持CSS Selector形式选择、支持html过滤，本身还附带了一个Http下载器。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Jsoup的代码相当简洁，Jsoup总共53个类，且没有任何第三方包的依赖，对比最终发行包9.8M的SAXON，实在算得上是短小精悍了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jsoup</span><br><span class="line">├── examples #样例，包括一个将html转为纯文本和一个抽取所有链接地址的例子。    </span><br><span class="line">├── helper #一些工具类，包括读取数据、处理连接以及字符串转换的工具</span><br><span class="line">├── nodes #DOM节点定义</span><br><span class="line">├── parser #解析html并转换为DOM树</span><br><span class="line">├── safety #安全相关，包括白名单及html过滤</span><br><span class="line">└── select #选择器，支持CSS Selector以及NodeVisitor格式的遍历</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Jsoup的入口是<code>Jsoup</code>类。examples包里提供了两个例子，解析html后，分别用CSS Selector以及NodeVisitor来操作Dom元素。</p><p>这里用<code>ListLinks</code>里的例子来说明如何调用Jsoup：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Validate.isTrue(args.length == <span class="number">1</span>, <span class="string">"usage: supply url to fetch"</span>);</span><br><span class="line">    String url = args[<span class="number">0</span>];</span><br><span class="line">    print(<span class="string">"Fetching %s..."</span>, url);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载url并解析成html DOM结构</span></span><br><span class="line">    Document doc = Jsoup.connect(url).get();</span><br><span class="line">    <span class="comment">// 使用select方法选择元素，参数是CSS Selector表达式</span></span><br><span class="line">    Elements links = doc.select(<span class="string">"a[href]"</span>);</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"\nLinks: (%d)"</span>, links.size());</span><br><span class="line">    <span class="keyword">for</span> (Element link : links) &#123;</span><br><span class="line">        <span class="comment">//使用abs:前缀取绝对url地址</span></span><br><span class="line">        print(<span class="string">" * a: &lt;%s&gt;  (%s)"</span>, link.attr(<span class="string">"abs:href"</span>), trim(link.text(), <span class="number">35</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Jsoup使用了自己的一套DOM代码体系，这里的Elements、Element等虽然名字和概念都与Java XML API<code>org.w3c.dom</code>类似，但并没有代码层面的关系。就是说你想用XML的一套API来操作Jsoup的结果是办不到的，但是正因为如此，才使得Jsoup可以抛弃xml里一些繁琐的API，使得代码更加简单。</p><p>还有一种方式是通过<code>NodeVisitor</code>来遍历DOM树，这个在对整个html做分析和替换时比较有用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NodeVisitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历到节点开始时，调用此方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">head</span><span class="params">(Node node, <span class="keyword">int</span> depth)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历到节点结束时(所有子节点都已遍历完)，调用此方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tail</span><span class="params">(Node node, <span class="keyword">int</span> depth)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HtmlToPlainText</code>的例子说明了如何使用NodeVisitor来遍历DOM树，将html转化为纯文本，并将需要换行的标签替换为换行\n：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Validate.isTrue(args.length == <span class="number">1</span>, <span class="string">"usage: supply url to fetch"</span>);</span><br><span class="line">    String url = args[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fetch the specified URL and parse to a HTML DOM</span></span><br><span class="line">    Document doc = Jsoup.connect(url).get();</span><br><span class="line"></span><br><span class="line">    HtmlToPlainText formatter = <span class="keyword">new</span> HtmlToPlainText();</span><br><span class="line">    String plainText = formatter.getPlainText(doc);</span><br><span class="line">    System.out.println(plainText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPlainText</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自定义一个NodeVisitor - FormattingVisitor</span></span><br><span class="line">    FormattingVisitor formatter = <span class="keyword">new</span> FormattingVisitor();</span><br><span class="line">    <span class="comment">//使用NodeTraversor来装载FormattingVisitor</span></span><br><span class="line">    NodeTraversor traversor = <span class="keyword">new</span> NodeTraversor(formatter);</span><br><span class="line">    <span class="comment">//进行遍历</span></span><br><span class="line">    traversor.traverse(element);</span><br><span class="line">    <span class="keyword">return</span> formatter.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下一节将从DOM结构开始对Jsoup代码进行分析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jsoup代码解读之一-概述&quot;&gt;&lt;a href=&quot;#Jsoup代码解读之一-概述&quot; class=&quot;headerlink&quot; title=&quot;Jsoup代码解读之一-概述&quot;&gt;&lt;/a&gt;Jsoup代码解读之一-概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;今天看到一个用py
      
    
    </summary>
    
      <category term="language" scheme="http://yoursite.com/categories/language/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/language/java/"/>
    
    
      <category term="javaCode" scheme="http://yoursite.com/tags/javaCode/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup代码解读之四-parser(上)</title>
    <link href="http://yoursite.com/jsoup%20learning%204/"/>
    <id>http://yoursite.com/jsoup learning 4/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-10-25T08:16:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jsoup代码解读之四-parser-上"><a href="#Jsoup代码解读之四-parser-上" class="headerlink" title="Jsoup代码解读之四-parser(上)"></a>Jsoup代码解读之四-parser(上)</h2><p>作为Java世界最好的HTML 解析库，Jsoup的parser实现非常具有代表性。这部分也是Jsoup最复杂的部分，需要一些数据结构、状态机乃至编译器的知识。好在HTML语法不复杂，解析只是到DOM树为止，所以作为编译器入门倒是挺合适的。这一块不要指望囫囵吞枣，我们还是泡一杯咖啡，细细品味其中的奥妙吧。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h3><p>将计算机语言转化为另一种计算机语言(通常是更底层的语言，例如机器码、汇编、或者JVM字节码)的过程就叫做编译(compile)。编译器(Compiler)是计算机科学的一个重要领域，已经有很多年历史了，而最近各种通用语言层出不穷，加上跨语言编译的兴起、DSL概念的流行，都让编译器变成了一个很时髦的东西。</p><p>编译器领域相关有三本公认的经典书籍，龙书<a href="http://book.douban.com/subject/1866231/" target="_blank" rel="noopener">《Compilers: Principles, Techniques, and Tools 》</a>，虎书<a href="http://book.douban.com/subject/1923484/" target="_blank" rel="noopener">《Modern Compiler Implementation in X (X表示各种语言)》</a>，鲸书<a href="http://book.douban.com/subject/1821532/" target="_blank" rel="noopener">《Advanced Compiler Design and Implementation》</a>。其中龙书是编译理论方面公认的不二之选，而后面两本则对实践更有指导意义。另外<a href="http://www.cnblogs.com/Ninputer" target="_blank" rel="noopener">@装配脑袋</a>有个很好的编译器入门系列博客：<a href="http://www.cnblogs.com/Ninputer/archive/2011/06/07/2074632.html" target="_blank" rel="noopener">http://www.cnblogs.com/Ninputer/archive/2011/06/07/2074632.html</a></p><p>编译器的基本流程如下：</p><p><img src="http://static.oschina.net/uploads/space/2013/0828/081055_j2Xy_190591.png" alt="compiler"></p><p>其中词法分析、语法分析、语义分析这部分又叫编译器的前端(front-end)，而此后的中间代码生成直到目标生成、优化等属于编译器的后端(back-end)。编译器的前端技术已经很成熟了，也有yacc这样的工具来自动进行词法、语法分析(Java里也有一个类似的工具ANTLR)，而后端技术更加复杂，也是目前编译器研究的重点。</p><p>说了这么多，回到咱们的HTML上来。HTML是一种声明式的语言，可以理解它的最终的输出是浏览器里图形化的页面，而并非可执行的目标语言，因此我将这里的Translate改为了Render。</p><p><img src="http://static.oschina.net/uploads/space/2013/0828/103726_uejc_190591.png" alt="html compiler"></p><p>在Jsoup(包括类似的HTML parser)里，只做了Lex(词法分析)、Parse(语法分析)两步，而HTML parse最终产出结果，就是DOM树。至于HTML的语义解析以及渲染，不妨看看携程UED团队的这篇文章：<a href="http://ued.ctrip.com/blog/?p=3295" target="_blank" rel="noopener">《浏览器是怎样工作的：渲染引擎，HTML解析》</a>。</p><h3 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h3><p>Jsoup的词法分析和语法分析都用到了状态机。状态机可以理解为一个特殊的程序模型，例如经常跟我们打交道的正则表达式就是用状态机实现的。</p><p>它由状态(state)和转移(transition)两部分构成。根据状态转移的可能性，状态机又分为DFA(确定有限状态机)和NFA(非确定有限状态自动机)。这里拿一个最简单的正则表达式”a[b]*”作为例子，我们先把它映射到一个状态机DFA，大概是这样子：</p><p><img src="http://static.oschina.net/uploads/space/2013/0828/131113_nyHh_190591.png" alt="state machine"></p><p>状态机本身是一个编程模型，这里我们尝试用程序去实现它，那么最直接的方式大概是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(StringReader reader)</span> <span class="keyword">throws</span> StringReader.EOFException </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">        <span class="keyword">case</span> Init:</span><br><span class="line">            ch = reader.read();</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'a'</span>) &#123;</span><br><span class="line">                state = State.AfterA;</span><br><span class="line">                accum.append(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> AfterA:</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> AfterB:</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Accept:</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写简单的状态机倒没有问题，但是复杂情况下就有点难受了。还有一种标准的状态机解法，先建立状态转移表，然后使用这个表建立状态机。这个方法的问题就是，只能做纯状态转移，无法在代码级别操作输入输出。</p><p>Jsoup里则使用了状态模式来实现状态机，初次看到时，确实让人眼前一亮。状态模式是设计模式的一种，它将状态和对应的行为绑定在一起。而在状态机的实现过程中，使用它来实现状态转移时的处理再合适不过了。</p><p>“a[b]*”的例子的状态模式实现如下，这里采用了与Jsoup相同的方式，用到了枚举来实现状态模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateModelABStateMachine</span> <span class="keyword">implements</span> <span class="title">ABStateMachine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    State state;</span><br><span class="line"></span><br><span class="line">    StringBuilder accum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> State &#123;</span><br><span class="line">        Init &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(StateModelABStateMachine stateModelABStateMachine, StringReader reader)</span> <span class="keyword">throws</span> StringReader.EOFException </span>&#123;</span><br><span class="line">                <span class="keyword">char</span> ch = reader.read();</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'a'</span>) &#123;</span><br><span class="line">                    stateModelABStateMachine.state = AfterA;</span><br><span class="line">                    stateModelABStateMachine.accum.append(ch);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        Accept &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">        AfterA &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">        AfterB &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(StateModelABStateMachine stateModelABStateMachine, StringReader reader)</span> <span class="keyword">throws</span> StringReader.EOFException </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(StringReader reader)</span> <span class="keyword">throws</span> StringReader.EOFException </span>&#123;</span><br><span class="line">        state.process(<span class="keyword">this</span>, reader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文中提到的几种状态机的完整实现在这个仓库的<a href="https://github.com/code4craft/jsoup-learning/tree/master/src/main/java/us/codecraft/learning/automata" target="_blank" rel="noopener">https://github.com/code4craft/jsoup-learning/tree/master/src/main/java/us/codecraft/learning/automata</a>路径下。</p><p>下一篇文章将从Jsoup的词法分析器开始来讲状态机的使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jsoup代码解读之四-parser-上&quot;&gt;&lt;a href=&quot;#Jsoup代码解读之四-parser-上&quot; class=&quot;headerlink&quot; title=&quot;Jsoup代码解读之四-parser(上)&quot;&gt;&lt;/a&gt;Jsoup代码解读之四-parser(上)&lt;/h2
      
    
    </summary>
    
      <category term="language" scheme="http://yoursite.com/categories/language/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/language/java/"/>
    
    
      <category term="javaCode" scheme="http://yoursite.com/tags/javaCode/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup代码解读之三-Document的输出</title>
    <link href="http://yoursite.com/jsoup%20learning%203/"/>
    <id>http://yoursite.com/jsoup learning 3/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-10-25T08:15:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jsoup代码解读之三-Document的输出"><a href="#Jsoup代码解读之三-Document的输出" class="headerlink" title="Jsoup代码解读之三-Document的输出"></a>Jsoup代码解读之三-Document的输出</h2><p>Jsoup官方说明里，一个重要的功能就是<strong><em>output tidy HTML</em></strong>。这里我们看看Jsoup是如何输出HTML的。</p><h2 id="HTML相关知识"><a href="#HTML相关知识" class="headerlink" title="HTML相关知识"></a>HTML相关知识</h2><p>分析代码前，我们不妨先想想，”tidy HTML”到底包括哪些东西：</p><ul><li>换行，块级标签习惯上都会独占一行</li><li>缩进，根据HTML标签嵌套层数，行首缩进会不同</li><li>严格的标签闭合，如果是可以自闭合的标签并且没有内容，则进行自闭合</li><li>HTML实体的转义</li></ul><p>这里要补充一下HTML标签的知识。HTML Tag可以分为block和inline两类。关于Tag的inline和block的定义可以参考<a href="http://www.w3schools.com/html/html_blocks.asp" target="_blank" rel="noopener">http://www.w3schools.com/html/html_blocks.asp</a>，而Jsoup的<code>Tag</code>类则是对Java开发者非常好的学习资料。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// internal static initialisers:</span></span><br><span class="line"><span class="comment">// prepped from http://www.w3.org/TR/REC-html40/sgml/dtd.html and other sources</span></span><br><span class="line"><span class="comment">//block tags，需要换行</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] blockTags = &#123;</span><br><span class="line">        <span class="string">"html"</span>, <span class="string">"head"</span>, <span class="string">"body"</span>, <span class="string">"frameset"</span>, <span class="string">"script"</span>, <span class="string">"noscript"</span>, <span class="string">"style"</span>, <span class="string">"meta"</span>, <span class="string">"link"</span>, <span class="string">"title"</span>, <span class="string">"frame"</span>,</span><br><span class="line">        <span class="string">"noframes"</span>, <span class="string">"section"</span>, <span class="string">"nav"</span>, <span class="string">"aside"</span>, <span class="string">"hgroup"</span>, <span class="string">"header"</span>, <span class="string">"footer"</span>, <span class="string">"p"</span>, <span class="string">"h1"</span>, <span class="string">"h2"</span>, <span class="string">"h3"</span>, <span class="string">"h4"</span>, <span class="string">"h5"</span>, <span class="string">"h6"</span>,</span><br><span class="line">        <span class="string">"ul"</span>, <span class="string">"ol"</span>, <span class="string">"pre"</span>, <span class="string">"div"</span>, <span class="string">"blockquote"</span>, <span class="string">"hr"</span>, <span class="string">"address"</span>, <span class="string">"figure"</span>, <span class="string">"figcaption"</span>, <span class="string">"form"</span>, <span class="string">"fieldset"</span>, <span class="string">"ins"</span>,</span><br><span class="line">        <span class="string">"del"</span>, <span class="string">"s"</span>, <span class="string">"dl"</span>, <span class="string">"dt"</span>, <span class="string">"dd"</span>, <span class="string">"li"</span>, <span class="string">"table"</span>, <span class="string">"caption"</span>, <span class="string">"thead"</span>, <span class="string">"tfoot"</span>, <span class="string">"tbody"</span>, <span class="string">"colgroup"</span>, <span class="string">"col"</span>, <span class="string">"tr"</span>, <span class="string">"th"</span>,</span><br><span class="line">        <span class="string">"td"</span>, <span class="string">"video"</span>, <span class="string">"audio"</span>, <span class="string">"canvas"</span>, <span class="string">"details"</span>, <span class="string">"menu"</span>, <span class="string">"plaintext"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//inline tags，无需换行</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] inlineTags = &#123;</span><br><span class="line">        <span class="string">"object"</span>, <span class="string">"base"</span>, <span class="string">"font"</span>, <span class="string">"tt"</span>, <span class="string">"i"</span>, <span class="string">"b"</span>, <span class="string">"u"</span>, <span class="string">"big"</span>, <span class="string">"small"</span>, <span class="string">"em"</span>, <span class="string">"strong"</span>, <span class="string">"dfn"</span>, <span class="string">"code"</span>, <span class="string">"samp"</span>, <span class="string">"kbd"</span>,</span><br><span class="line">        <span class="string">"var"</span>, <span class="string">"cite"</span>, <span class="string">"abbr"</span>, <span class="string">"time"</span>, <span class="string">"acronym"</span>, <span class="string">"mark"</span>, <span class="string">"ruby"</span>, <span class="string">"rt"</span>, <span class="string">"rp"</span>, <span class="string">"a"</span>, <span class="string">"img"</span>, <span class="string">"br"</span>, <span class="string">"wbr"</span>, <span class="string">"map"</span>, <span class="string">"q"</span>,</span><br><span class="line">        <span class="string">"sub"</span>, <span class="string">"sup"</span>, <span class="string">"bdo"</span>, <span class="string">"iframe"</span>, <span class="string">"embed"</span>, <span class="string">"span"</span>, <span class="string">"input"</span>, <span class="string">"select"</span>, <span class="string">"textarea"</span>, <span class="string">"label"</span>, <span class="string">"button"</span>, <span class="string">"optgroup"</span>,</span><br><span class="line">        <span class="string">"option"</span>, <span class="string">"legend"</span>, <span class="string">"datalist"</span>, <span class="string">"keygen"</span>, <span class="string">"output"</span>, <span class="string">"progress"</span>, <span class="string">"meter"</span>, <span class="string">"area"</span>, <span class="string">"param"</span>, <span class="string">"source"</span>, <span class="string">"track"</span>,</span><br><span class="line">        <span class="string">"summary"</span>, <span class="string">"command"</span>, <span class="string">"device"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//emptyTags是不能有内容的标签，这类标签都是可以自闭合的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] emptyTags = &#123;</span><br><span class="line">        <span class="string">"meta"</span>, <span class="string">"link"</span>, <span class="string">"base"</span>, <span class="string">"frame"</span>, <span class="string">"img"</span>, <span class="string">"br"</span>, <span class="string">"wbr"</span>, <span class="string">"embed"</span>, <span class="string">"hr"</span>, <span class="string">"input"</span>, <span class="string">"keygen"</span>, <span class="string">"col"</span>, <span class="string">"command"</span>,</span><br><span class="line">        <span class="string">"device"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] formatAsInlineTags = &#123;</span><br><span class="line">        <span class="string">"title"</span>, <span class="string">"a"</span>, <span class="string">"p"</span>, <span class="string">"h1"</span>, <span class="string">"h2"</span>, <span class="string">"h3"</span>, <span class="string">"h4"</span>, <span class="string">"h5"</span>, <span class="string">"h6"</span>, <span class="string">"pre"</span>, <span class="string">"address"</span>, <span class="string">"li"</span>, <span class="string">"th"</span>, <span class="string">"td"</span>, <span class="string">"script"</span>, <span class="string">"style"</span>,</span><br><span class="line">        <span class="string">"ins"</span>, <span class="string">"del"</span>, <span class="string">"s"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//在这些标签里，需要保留空格</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] preserveWhitespaceTags = &#123;</span><br><span class="line">        <span class="string">"pre"</span>, <span class="string">"plaintext"</span>, <span class="string">"title"</span>, <span class="string">"textarea"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外，Jsoup的<code>Entities</code>类里包含了一些HTML实体转义的东西。这些转义的对应数据保存在<code>entities-full.properties</code>和<code>entities-base.properties</code>里。</p><h2 id="Jsoup的格式化实现"><a href="#Jsoup的格式化实现" class="headerlink" title="Jsoup的格式化实现"></a>Jsoup的格式化实现</h2><p>在Jsoup里，直接调用<code>Document.toString()</code>(继承自Element)，即可对文档进行输出。另外<code>OutputSettings</code>可以控制输出格式，主要是<code>prettyPrint</code>(是否重新格式化)、<code>outline</code>(是否强制所有标签换行)、<code>indentAmount</code>(缩进长度)等。</p><p>里面的继承和互相调用关系略微复杂，大概是这样子：</p><p><code>Document.toString()</code>=&gt;<code>Document.outerHtml()</code>=&gt;<code>Element.html()</code>，最终<code>Element.html()</code>又会循环调用所有子元素的<code>outerHtml()</code>，拼接起来作为输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">html</span><span class="params">(StringBuilder accum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Node node : childNodes)</span><br><span class="line">        node.outerHtml(accum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>outerHtml()</code>会使用一个<code>OuterHtmlVisitor</code>对所以子节点做遍历，并拼装起来作为结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">outerHtml</span><span class="params">(StringBuilder accum)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">new</span> NodeTraversor(<span class="keyword">new</span> OuterHtmlVisitor(accum, getOutputSettings())).traverse(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>OuterHtmlVisitor会对所有子节点做遍历，并调用<code>node.outerHtmlHead()</code>和<code>node.outerHtmlTail</code>两个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterHtmlVisitor</span> <span class="keyword">implements</span> <span class="title">NodeVisitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder accum;</span><br><span class="line">    <span class="keyword">private</span> Document.OutputSettings out;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">head</span><span class="params">(Node node, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">        node.outerHtmlHead(accum, depth, out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tail</span><span class="params">(Node node, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node.nodeName().equals(<span class="string">"#text"</span>)) <span class="comment">// saves a void hit.</span></span><br><span class="line">            node.outerHtmlTail(accum, depth, out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们终于找到了真正工作的代码，<code>node.outerHtmlHead()</code>和<code>node.outerHtmlTail</code>。Jsoup里每种Node的输出方式都不太一样，这里只讲讲两种主要节点：<code>Element</code>和<code>TextNode</code>。<code>Element</code>是格式化的主要对象，它的两个方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outerHtmlHead</span><span class="params">(StringBuilder accum, <span class="keyword">int</span> depth, Document.OutputSettings out)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (accum.length() &gt; <span class="number">0</span> &amp;&amp; out.prettyPrint()</span><br><span class="line">            &amp;&amp; (tag.formatAsBlock() || (parent() != <span class="keyword">null</span> &amp;&amp; parent().tag().formatAsBlock()) || out.outline()) )</span><br><span class="line">        <span class="comment">//换行并调整缩进</span></span><br><span class="line">        indent(accum, depth, out);</span><br><span class="line">    accum</span><br><span class="line">            .append(<span class="string">"&lt;"</span>)</span><br><span class="line">            .append(tagName());</span><br><span class="line">    attributes.html(accum, out);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (childNodes.isEmpty() &amp;&amp; tag.isSelfClosing())</span><br><span class="line">        accum.append(<span class="string">" /&gt;"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        accum.append(<span class="string">"&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outerHtmlTail</span><span class="params">(StringBuilder accum, <span class="keyword">int</span> depth, Document.OutputSettings out)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(childNodes.isEmpty() &amp;&amp; tag.isSelfClosing())) &#123;</span><br><span class="line">        <span class="keyword">if</span> (out.prettyPrint() &amp;&amp; (!childNodes.isEmpty() &amp;&amp; (</span><br><span class="line">                tag.formatAsBlock() || (out.outline() &amp;&amp; (childNodes.size()&gt;<span class="number">1</span> || (childNodes.size()==<span class="number">1</span> &amp;&amp; !(childNodes.get(<span class="number">0</span>) <span class="keyword">instanceof</span> TextNode))))</span><br><span class="line">        )))</span><br><span class="line">            <span class="comment">//换行并调整缩进</span></span><br><span class="line">            indent(accum, depth, out);</span><br><span class="line">        accum.append(<span class="string">"&lt;/"</span>).append(tagName()).append(<span class="string">"&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而ident方法的代码只有一行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">indent</span><span class="params">(StringBuilder accum, <span class="keyword">int</span> depth, Document.OutputSettings out)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//out.indentAmount()是缩进长度，默认是1</span></span><br><span class="line">    accum.append(<span class="string">"\n"</span>).append(StringUtil.padding(depth * out.indentAmount()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码简单明了，就没什么好说的了。值得一提的是，<code>StringUtil.padding()</code>方法为了减少字符串生成，把常用的缩进保存到了一个数组中。</p><p>好了，水了一篇文章，下一篇将比较有技术含量的parser部分。</p><p>另外，通过本节的学习，我们学到了要把StringBuilder命名为<strong>accum</strong>，而不是<strong>sb</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jsoup代码解读之三-Document的输出&quot;&gt;&lt;a href=&quot;#Jsoup代码解读之三-Document的输出&quot; class=&quot;headerlink&quot; title=&quot;Jsoup代码解读之三-Document的输出&quot;&gt;&lt;/a&gt;Jsoup代码解读之三-Docum
      
    
    </summary>
    
      <category term="language" scheme="http://yoursite.com/categories/language/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/language/java/"/>
    
    
      <category term="javaCode" scheme="http://yoursite.com/tags/javaCode/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup代码解读之五-parser(中)</title>
    <link href="http://yoursite.com/jsoup%20learning%205/"/>
    <id>http://yoursite.com/jsoup learning 5/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-10-25T08:17:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jsoup代码解读之五-parser-中"><a href="#Jsoup代码解读之五-parser-中" class="headerlink" title="Jsoup代码解读之五-parser(中)"></a>Jsoup代码解读之五-parser(中)</h2><p>上一篇文章讲到了状态机和词法分析的基本知识，这一节我们来分析Jsoup是如何进行词法分析的。</p><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p>先介绍以下parser包里的主要类：</p><ul><li><p><code>Parser</code></p><p>  Jsoup parser的入口facade，封装了常用的parse静态方法。可以设置<code>maxErrors</code>，用于收集错误记录，默认是0，即不收集。与之相关的类有<code>ParseError</code>,<code>ParseErrorList</code>。基于这个功能，我写了一个<a href="https://github.com/code4craft/jsoup-learning/tree/master/src/main/java/us/codecraft/learning/parser" target="_blank" rel="noopener"><code>PageErrorChecker</code></a>来对页面做语法检查，并输出语法错误。</p></li><li><p><code>Token</code> </p><p>  保存单个的词法分析结果。Token是一个抽象类，它的实现有<code>Doctype</code>,<code>StartTag</code>,<code>EndTag</code>,<code>Comment</code>,<code>Character</code>,<code>EOF</code>6种，对应6种词法类型。</p></li><li><p><code>Tokeniser</code> </p><p>  保存词法分析过程的状态及结果。比较重要的两个字段是<code>state</code>和<code>emitPending</code>，前者保存状态，后者保存输出。其次还有<code>tagPending</code>/<code>doctypePending</code>/<code>commentPending</code>，保存还没有填充完整的Token。</p></li><li><p><code>CharacterReader</code></p><p>  对读取字符的逻辑的封装，用于Tokenize时候的字符输入。CharacterReader包含了类似NIO里ByteBuffer的<code>consume()</code>、<code>unconsume()</code>、<code>mark()</code>、<code>rewindToMark()</code>，还有高级的<code>consumeTo()</code>这样的用法。</p></li><li><p><code>TokeniserState</code></p><p>   用枚举实现的词法分析状态机。</p></li><li><p><code>HtmlTreeBuilder</code></p><p>  语法分析，通过token构建DOM树的类。</p></li><li><p><code>HtmlTreeBuilderState</code></p><p>  语法分析状态机。</p></li><li><p><code>TokenQueue</code></p><p>  虽然披了个Token的马甲，其实是在query的时候用到，留到select部分再讲。</p></li></ul><h2 id="词法分析状态机"><a href="#词法分析状态机" class="headerlink" title="词法分析状态机"></a>词法分析状态机</h2><p>现在我们来讲讲HTML的词法分析过程。这里借用一下<a href="http://ued.ctrip.com/blog/?p=3295" target="_blank" rel="noopener">http://ued.ctrip.com/blog/?p=3295</a>里的图，图中描述了一个Tag标签的状态转移过程，</p><p><img src="http://taligarsiel.com/Projects/image019.png" alt="lexer"></p><p>这里忽略了HTML注释、实体以及属性，只保留基本的开始/结束标签，例如下面的HTML:</p><pre><code>&lt;div&gt;test&lt;/div&gt;</code></pre><p>Jsoup里词法分析比较复杂，我从里面抽取出了对应的部分，就成了我们的miniSoupLexer(这里省略了部分代码，完整代码可以看这里<a href="https://github.com/code4craft/jsoup-learning/blob/master/src/main/java/org/jsoup/parser/MiniSoupTokeniserState.java" target="_blank" rel="noopener"><code>MiniSoupTokeniserState</code></a>)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> MiniSoupTokeniserState implements ITokeniserState &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 什么层级都没有的状态</span></span><br><span class="line"><span class="comment">     * ⬇</span></span><br><span class="line"><span class="comment">     * &lt;div&gt;test&lt;/div&gt;</span></span><br><span class="line"><span class="comment">     *      ⬇</span></span><br><span class="line"><span class="comment">     * &lt;div&gt;test&lt;/div&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Data &#123;</span><br><span class="line">        <span class="comment">// in data state, gather characters until a character reference or tag is found</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Tokeniser t, CharacterReader r)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (r.current()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">                    t.advanceTransition(TagOpen);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> eof:</span><br><span class="line">                    t.emit(<span class="keyword">new</span> Token.EOF());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    String data = r.consumeToAny(<span class="string">'&amp;'</span>, <span class="string">'&lt;'</span>, nullChar);</span><br><span class="line">                    t.emit(data);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ⬇</span></span><br><span class="line"><span class="comment">     * &lt;div&gt;test&lt;/div&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TagOpen &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *           ⬇</span></span><br><span class="line"><span class="comment">     * &lt;div&gt;test&lt;/div&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EndTagOpen &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  ⬇</span></span><br><span class="line"><span class="comment">     * &lt;div&gt;test&lt;/div&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TagName &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考这个程序，可以看到Jsoup的词法分析的大致思路。分析器本身的编写是比较繁琐的过程，涉及属性值(区分单双引号)、DocType、注释、HTML实体，以及一些错误情况。不过了解了其思路，代码实现也是按部就班的过程。</p><p>下一节开始介绍语法分析部分。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jsoup代码解读之五-parser-中&quot;&gt;&lt;a href=&quot;#Jsoup代码解读之五-parser-中&quot; class=&quot;headerlink&quot; title=&quot;Jsoup代码解读之五-parser(中)&quot;&gt;&lt;/a&gt;Jsoup代码解读之五-parser(中)&lt;/h2
      
    
    </summary>
    
      <category term="language" scheme="http://yoursite.com/categories/language/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/language/java/"/>
    
    
      <category term="javaCode" scheme="http://yoursite.com/tags/javaCode/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup代码解读之七-实现一个CSS Selector</title>
    <link href="http://yoursite.com/jsoup%20learning%207/"/>
    <id>http://yoursite.com/jsoup learning 7/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-10-25T08:18:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jsoup代码解读之七-实现一个CSS-Selector"><a href="#Jsoup代码解读之七-实现一个CSS-Selector" class="headerlink" title="Jsoup代码解读之七-实现一个CSS Selector"></a>Jsoup代码解读之七-实现一个CSS Selector</h2><p><img src="http://static.oschina.net/uploads/space/2013/0830/180244_r1Vb_190591.jpg" alt="street fighter"></p><p>当当当！终于来到了Jsoup的特色：CSS Selector部分。selector也是我写的爬虫框架<a href="https://github.com/code4craft/webmagic" target="_blank" rel="noopener">webmagic</a>开发的一个重点。附上一张street fighter的图，希望以后webmagic也能挑战Jsoup!</p><h2 id="select机制"><a href="#select机制" class="headerlink" title="select机制"></a>select机制</h2><p>Jsoup的select包里，类结构如下：</p><p><img src="http://static.oschina.net/uploads/space/2013/0830/184337_j85b_190591.png" alt="uml"></p><p>在最开始介绍Jsoup的时候，就已经说过<code>NodeVisitor</code>和<code>Selector</code>了。<code>Selector</code>是select部分的对外facade，而<code>NodeVisitor</code>则是遍历树的底层API，CSS Selector也是根据<code>NodeVisitor</code>实现的遍历。</p><p>Jsoup的select核心是<code>Evaluator</code>。Selector所传递的表达式，会经过<code>QueryParser</code>，最终编译成一个<code>Evaluator</code>。<code>Evaluator</code>是一个抽象类，它只有一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Element root, Element element)</span></span>;</span><br></pre></td></tr></table></figure><p>注意这里传入了root，是为了某些情况下对树进行遍历时用的。</p><p>Evaluator的设计简洁明了，所有的Selector表达式单词都会编译到对应的Evaluator。例如<code>#xx</code>对应<code>Id</code>，<code>.xx</code>对应<code>Class</code>，<code>[]</code>对应<code>Attribute</code>。这里补充一下w3c的CSS Selector规范：<a href="http://www.w3.org/TR/CSS2/selector.html" target="_blank" rel="noopener">http://www.w3.org/TR/CSS2/selector.html</a></p><p>当然，只靠这几个还不够，Jsoup还定义了<code>CombiningEvaluator</code>(对Evaluator进行And/Or组合)，<code>StructuralEvaluator</code>(结合DOM树结构进行筛选)。</p><p>这里我们可能最关心的是，“div ul li”这样的父子结构是如何实现的。这个的实现方式在<code>StructuralEvaluator.Parent</code>中，贴一下代码了：</p><pre><code class="java"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">StructuralEvaluator</span> </span>{    <span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">(Evaluator evaluator)</span> </span>{        <span class="keyword">this</span>.evaluator = evaluator;    }    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Element root, Element element)</span> </span>{        <span class="keyword">if</span> (root == element)            <span class="keyword">return</span> <span class="keyword">false</span>;        Element parent = element.parent();        <span class="keyword">while</span> (parent != root) {            <span class="keyword">if</span> (evaluator.matches(root, parent))                <span class="keyword">return</span> <span class="keyword">true</span>;            parent = parent.parent();        }        <span class="keyword">return</span> <span class="keyword">false</span>;    }}</code></pre><p>这里Parent包含了一个<code>evaluator</code>属性，会根据这个evaluator去验证所有父节点。注意Parent是可以嵌套的，所以这个表达式”div ul li”最终会编译成<code>And(Parent(And(Parent(Tag(&quot;div&quot;))，Tag(&quot;ul&quot;)),Tag(&quot;li&quot;)))</code>这样的Evaluator组合。</p><p>select部分比想象的要简单，代码可读性也很高。经过了parser部分的研究，这部分应该算是驾轻就熟了。</p><h2 id="关于webmagic的后续打算"><a href="#关于webmagic的后续打算" class="headerlink" title="关于webmagic的后续打算"></a>关于webmagic的后续打算</h2><p>webmagic是一个爬虫框架，它的Selector是用于抓取HTML中指定的文本，其机制和Jsoup的Evaluator非常像，只不过webmagic暂时是将Selector封装成较简单的API，而Evaluator直接上了表达式。之前也考虑过自己定制DSL来写一个HTML，现在看了Jsoup的源码，实现能力算是有了，但是引入DSL，实现只是一小部分，如何让DSL易写易懂才是难点。</p><p>其实看了Jsoup的源码，精细程度上比webmagic要好得多了，基本每个类都对应一个真实的概念抽象，可能以后会在这方面下点工夫。</p><p>下篇文章将讲最后一部分：白名单及HTML过滤机制。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jsoup代码解读之七-实现一个CSS-Selector&quot;&gt;&lt;a href=&quot;#Jsoup代码解读之七-实现一个CSS-Selector&quot; class=&quot;headerlink&quot; title=&quot;Jsoup代码解读之七-实现一个CSS Selector&quot;&gt;&lt;/a&gt;Js
      
    
    </summary>
    
      <category term="language" scheme="http://yoursite.com/categories/language/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/language/java/"/>
    
    
      <category term="javaCode" scheme="http://yoursite.com/tags/javaCode/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup代码解读之六-parser(下)</title>
    <link href="http://yoursite.com/jsoup%20learning%206/"/>
    <id>http://yoursite.com/jsoup learning 6/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-10-25T08:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jsoup代码解读之六-parser-下"><a href="#Jsoup代码解读之六-parser-下" class="headerlink" title="Jsoup代码解读之六-parser(下)"></a>Jsoup代码解读之六-parser(下)</h2><p>最近生活上有点忙，女儿老是半夜不睡，精神状态也不是很好。工作上的事情也谈不上顺心，有很多想法但是没有几个被认可，有些事情也不是说代码写得好就行的。算了，还是端正态度，毕竟资历尚浅，我还是继续我的。</p><p>读Jsoup源码并非无聊，目的其实是为了将webmagic做的更好一点，毕竟parser也是爬虫的重要组成部分之一。读了代码后，收获也不少，对HTML的知识也更进一步了。</p><h2 id="DOM树产生过程"><a href="#DOM树产生过程" class="headerlink" title="DOM树产生过程"></a>DOM树产生过程</h2><p>这里单独将<code>TreeBuilder</code>部分抽出来叫做语法分析过程可能稍微不妥，其实就是根据Token生成DOM树的过程，不过我还是沿用这个编译器里的称呼了。</p><p><code>TreeBuilder</code>同样是一个facade对象，真正进行语法解析的是以下一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">runParser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        Token token = tokeniser.read();</span><br><span class="line">        </span><br><span class="line">        process(token);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (token.type == Token.TokenType.EOF)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TreeBuilder</code>有两个子类，<code>HtmlTreeBuilder</code>和<code>XmlTreeBuilder</code>。<code>XmlTreeBuilder</code>自然是构建XML树的类，实现颇为简单，基本上是维护一个栈，并根据不同Token插入节点即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Token token)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// start tag, end tag, doctype, comment, character, eof</span></span><br><span class="line">       <span class="keyword">switch</span> (token.type) &#123;</span><br><span class="line">           <span class="keyword">case</span> StartTag:</span><br><span class="line">               insert(token.asStartTag());</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> EndTag:</span><br><span class="line">               popStackToClose(token.asEndTag());</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> Comment:</span><br><span class="line">               insert(token.asComment());</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> Character:</span><br><span class="line">               insert(token.asCharacter());</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> Doctype:</span><br><span class="line">               insert(token.asDoctype());</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> EOF: <span class="comment">// could put some normalisation here if desired</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               Validate.fail(<span class="string">"Unexpected token type: "</span> + token.type);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>insertNode</code>的代码大致是这个样子(为了便于展示，对方法进行了一些整合)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Element <span class="title">insert</span><span class="params">(Token.StartTag startTag)</span> </span>&#123;</span><br><span class="line">    Tag tag = Tag.valueOf(startTag.name());</span><br><span class="line">    Element el = <span class="keyword">new</span> Element(tag, baseUri, startTag.attributes);</span><br><span class="line">    stack.getLast().appendChild(el);</span><br><span class="line">    <span class="keyword">if</span> (startTag.isSelfClosing()) &#123;</span><br><span class="line">        tokeniser.acknowledgeSelfClosingFlag();</span><br><span class="line">        <span class="keyword">if</span> (!tag.isKnownTag()) <span class="comment">// unknown tag, remember this is self closing for output. see above.</span></span><br><span class="line">            tag.setSelfClosing();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stack.add(el);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTML解析状态机"><a href="#HTML解析状态机" class="headerlink" title="HTML解析状态机"></a>HTML解析状态机</h2><p>相比<code>XmlTreeBuilder</code>，<code>HtmlTreeBuilder</code>则实现较为复杂，除了类似的栈结构以外，还用到了<code>HtmlTreeBuilderState</code>来构建了一个状态机来分析HTML。这是为什么呢？不妨看看<code>HtmlTreeBuilderState</code>到底用到了哪些状态吧（在代码中中用<code>&lt;!-- State: --&gt;</code>标明状态）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- State: Initial --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- State: BeforeHtml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">'zh-CN'</span> <span class="attr">xml:lang</span>=<span class="string">'zh-CN'</span> <span class="attr">xmlns</span>=<span class="string">'http://www.w3.org/1999/xhtml'</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- State: BeforeHead --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- State: InHead --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">  //<span class="comment">&lt;!-- State: Text --&gt;</span></span></span><br><span class="line"><span class="undefined">    function xx()&#123;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- State: InHeadNoscript --&gt;</span></span><br><span class="line">    Your browser does not support JavaScript!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- State: AfterHead --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- State: InBody --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- State: Text --&gt;</span></span><br><span class="line">    xxx</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- State: InTable --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- State: InTableText --&gt;</span></span><br><span class="line">    xxx</span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- State: InTableBody --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- State: InRow --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- State: InCell --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里可以看到，HTML标签是有嵌套要求的，例如<code>&lt;tr&gt;</code>,<code>&lt;td&gt;</code>需要组合<code>&lt;table&gt;</code>来使用。根据Jsoup的代码，可以发现，<code>HtmlTreeBuilderState</code>做了以下一些事情：</p><ul><li><h3 id="语法检查"><a href="#语法检查" class="headerlink" title="语法检查"></a>语法检查</h3><p>  例如<code>tr</code>没有嵌套在<code>table</code>标签内，则是一个语法错误。当<code>InBody</code>状态直接出现以下tag时，则出错。Jsoup里遇到这种错误，会发现这个Token的解析并记录错误，然后继续解析下面内容，并不会直接退出。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> InBody &#123;</span><br><span class="line">     <span class="function"><span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Token t, HtmlTreeBuilder tb)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtil.in(name,</span><br><span class="line"><span class="string">"caption"</span>, <span class="string">"col"</span>, <span class="string">"colgroup"</span>, <span class="string">"frame"</span>, <span class="string">"head"</span>, <span class="string">"tbody"</span>, <span class="string">"td"</span>, <span class="string">"tfoot"</span>, <span class="string">"th"</span>, <span class="string">"thead"</span>, <span class="string">"tr"</span>)) &#123;</span><br><span class="line">tb.error(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="标签补全"><a href="#标签补全" class="headerlink" title="标签补全"></a>标签补全</h3><p>  例如<code>head</code>标签没有闭合，就写入了一些只有body内才允许出现的标签，则自动闭合<code>&lt;/head&gt;</code>。<code>HtmlTreeBuilderState</code>有的方法<code>anythingElse()</code>就提供了自动补全标签，例如<code>InHead</code>状态的自动闭合代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">anythingElse</span><span class="params">(Token t, TreeBuilder tb)</span> </span>&#123;</span><br><span class="line">            tb.process(<span class="keyword">new</span> Token.EndTag(<span class="string">"head"</span>));</span><br><span class="line">            <span class="keyword">return</span> tb.process(t);</span><br><span class="line">        &#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">还有一种标签闭合方式，例如下面的代码：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeCell</span><span class="params">(HtmlTreeBuilder tb)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (tb.inTableScope(<span class="string">"td"</span>))</span><br><span class="line">                tb.process(<span class="keyword">new</span> Token.EndTag(<span class="string">"td"</span>));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tb.process(<span class="keyword">new</span> Token.EndTag(<span class="string">"th"</span>)); <span class="comment">// only here if th or td in scope</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="实例研究"><a href="#实例研究" class="headerlink" title="实例研究"></a>实例研究</h2><h3 id="缺少标签时，会发生什么事？"><a href="#缺少标签时，会发生什么事？" class="headerlink" title="缺少标签时，会发生什么事？"></a>缺少标签时，会发生什么事？</h3><p>好了，看了这么多parser的源码，不妨回到我们的日常应用上来。我们知道，在页面里多写一个两个未闭合的标签是很正常的事，那么它们会被怎么解析呢？</p><p>就拿<code>&lt;div&gt;</code>标签为例：</p><ol><li><p>漏写了开始标签，只写了结束标签</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> EndTag:</span><br><span class="line"><span class="keyword">if</span> (StringUtil.in(name,<span class="string">"div"</span>,<span class="string">"dl"</span>, <span class="string">"fieldset"</span>, <span class="string">"figcaption"</span>, <span class="string">"figure"</span>, <span class="string">"footer"</span>, <span class="string">"header"</span>, <span class="string">"pre"</span>, <span class="string">"section"</span>, <span class="string">"summary"</span>, <span class="string">"ul"</span>)) &#123;                </span><br><span class="line"><span class="keyword">if</span> (!tb.inScope(name)) &#123;</span><br><span class="line">tb.error(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><pre><code>恭喜你，这个`&lt;/div&gt;`会被当做错误处理掉，于是你的页面就毫无疑问的乱掉了！当然，如果单纯多写了一个`&lt;/div&gt;`，好像也不会有什么影响哦？(记得有人跟我讲过为了防止标签未闭合，而在页面底部多写了几个`&lt;/div&gt;`的故事)</code></pre><ol start="2"><li><p>写了开始标签，漏写了结束标签</p><p> 这个情况分析起来更复杂一点。如果是无法在内部嵌套内容的标签，那么在遇到不可接受的标签时，会进行闭合。而<code>&lt;div&gt;</code>标签可以包括大多数标签，这种情况下，其作用域会持续到HTML结束。</p></li></ol><p>好了，parser系列算是分析结束了，其间学到不少HTML及状态机内容，但是离实际使用比较远。下面开始select部分，这部分可能对日常使用更有意义一点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jsoup代码解读之六-parser-下&quot;&gt;&lt;a href=&quot;#Jsoup代码解读之六-parser-下&quot; class=&quot;headerlink&quot; title=&quot;Jsoup代码解读之六-parser(下)&quot;&gt;&lt;/a&gt;Jsoup代码解读之六-parser(下)&lt;/h2
      
    
    </summary>
    
      <category term="language" scheme="http://yoursite.com/categories/language/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/language/java/"/>
    
    
      <category term="javaCode" scheme="http://yoursite.com/tags/javaCode/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup代码解读之八-防御XSS攻击</title>
    <link href="http://yoursite.com/jsoup%20learning%208/"/>
    <id>http://yoursite.com/jsoup learning 8/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-10-25T08:18:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jsoup代码解读之八-防御XSS攻击"><a href="#Jsoup代码解读之八-防御XSS攻击" class="headerlink" title="Jsoup代码解读之八-防御XSS攻击"></a>Jsoup代码解读之八-防御XSS攻击</h2><p><img src="http://static.oschina.net/uploads/space/2013/0831/071752_RBZc_190591.png" alt="hacker"></p><h2 id="防御XSS攻击的一般原理"><a href="#防御XSS攻击的一般原理" class="headerlink" title="防御XSS攻击的一般原理"></a>防御XSS攻击的一般原理</h2><p>cleaner是Jsoup的重要功能之一，我们常用它来进行富文本输入中的XSS防御。</p><p>我们知道，XSS攻击的一般方式是，通过在页面输入中嵌入一段恶意脚本，对输出时的DOM结构进行修改，从而达到执行这段脚本的目的。对于纯文本输入，过滤/转义HTML特殊字符<code>&lt;</code>,<code>&gt;</code>,<code>&quot;</code>,<code>&#39;</code>是行之有效的办法，但是如果本身用户输入的就是一段HTML文本(例如博客文章)，这种方式就不太有效了。这个时候，就是Jsoup大显身手的时候了。</p><p>在前面，我们已经知道了，Jsoup里怎么将HTML变成一棵DOM树，怎么对DOM树进行遍历，怎么对DOM文档进行输出，那么其实cleaner的实现方式，也能猜出大概了。使用Jsoup进行XSS防御，大致分为三个步骤:</p><ol><li><p>将HTML解析为DOM树</p><p> 这一步可以过滤掉一些企图搞破坏的非闭合标签、非正常语法等。例如一些输入，会尝试用<code>&lt;/textarea&gt;</code>闭合当前Tag，然后写入攻击脚本。而根据前面对Jsoup的parser的分析，这种时候，这些非闭合标签会被当做错误并丢弃。</p></li><li><p>过滤高风险标签/属性/属性值</p><p> 高风险标签是指<code>&lt;script&gt;</code>以及类似标签，对属性/属性值进行过滤是因为某些属性值里也可以写入javascript脚本，例如<code>onclick=&#39;alert(&quot;xss!&quot;)&#39;</code>。</p></li></ol><ol start="3"><li><p>重新将DOM树输出为HTML文本</p><p> DOM树的输出，在前面(Jsoup代码解读之三)已经提到过了。</p></li></ol><h2 id="Cleaner与Whitelist"><a href="#Cleaner与Whitelist" class="headerlink" title="Cleaner与Whitelist"></a>Cleaner与Whitelist</h2><p>对于上述的两个步骤，1、3都已经分别在parser和输出中完成，现在只剩下步骤 2：过滤高风险标签等。</p><p>Jsoup给出的答案是白名单。下面是<code>Whitelist</code>的部分代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Whitelist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;TagName&gt; tagNames; <span class="comment">// tags allowed, lower case. e.g. [p, br, span]</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;TagName, Set&lt;AttributeKey&gt;&gt; attributes; <span class="comment">// tag -&gt; attribute[]. allowed attributes [href] for a tag.</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;TagName, Map&lt;AttributeKey, AttributeValue&gt;&gt; enforcedAttributes; <span class="comment">// always set these attribute values</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;TagName, Map&lt;AttributeKey, Set&lt;Protocol&gt;&gt;&gt; protocols; <span class="comment">// allowed URL protocols for attributes</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> preserveRelativeLinks; <span class="comment">// option to preserve relative links</span></span><br><span class="line">&#125;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">这里定义了标签名/属性名/属性值的白名单。</span><br><span class="line"></span><br><span class="line">而`Cleaner`是过滤的执行者。不出所料，Cleaner内部定义了`CleaningVisitor`来进行标签的过滤。CleaningVisitor的过滤过程并不改变原始DOM树的值，而是将符合条件的属性，加入到`Element destination`里去。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CleaningVisitor</span> <span class="keyword">implements</span> <span class="title">NodeVisitor</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> numDiscarded = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Element root;</span><br><span class="line">        <span class="keyword">private</span> Element destination; <span class="comment">// current element to append nodes to</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">CleaningVisitor</span><span class="params">(Element root, Element destination)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.root = root;</span><br><span class="line">            <span class="keyword">this</span>.destination = destination;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">head</span><span class="params">(Node source, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (source <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">                Element sourceEl = (Element) source;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (whitelist.isSafeTag(sourceEl.tagName())) &#123; <span class="comment">// safe, clone and copy safe attrs</span></span><br><span class="line">                    ElementMeta meta = createSafeElement(sourceEl);</span><br><span class="line">                    Element destChild = meta.el;</span><br><span class="line">                    destination.appendChild(destChild);</span><br><span class="line"></span><br><span class="line">                    numDiscarded += meta.numAttribsDiscarded;</span><br><span class="line">                    destination = destChild;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (source != root) &#123; <span class="comment">// not a safe tag, so don't add. don't count root against discarded.</span></span><br><span class="line">                    numDiscarded++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (source <span class="keyword">instanceof</span> TextNode) &#123;</span><br><span class="line">                TextNode sourceText = (TextNode) source;</span><br><span class="line">                TextNode destText = <span class="keyword">new</span> TextNode(sourceText.getWholeText(), source.baseUri());</span><br><span class="line">                destination.appendChild(destText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// else, we don't care about comments, xml proc instructions, etc</span></span><br><span class="line">                numDiscarded++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tail</span><span class="params">(Node source, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (source <span class="keyword">instanceof</span> Element &amp;&amp; whitelist.isSafeTag(source.nodeName())) &#123;</span><br><span class="line">                destination = destination.parent(); <span class="comment">// would have descended, so pop destination stack</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>至此，Jsoup的全部模块都已经写完了。Jsoup源码并不多，只有14000多行，但是实现非常精巧，在读代码的过程中，除了相关知识，还验证几个很重要的思想：</p><ul><li><p>最好的代码抽象，是对现实概念的映射。</p><p>  这句话在看《代码大全》的时候印象很深刻。在Jsoup里，只要有相关知识，每个类的作用都能第一时间明白其作用。</p></li><li><p>不要过度抽象</p><p>  在Jsoup里，只用到了两个接口，一个是<code>NodeVisitor</code>，一个是<code>Connection</code>，其他都是用抽象类或者直接用实现类代替。记得有次面试的时候被问到我们开发中每逢一个功能，都要先定义一个接口的做法是否必要？现在的答案是没有必要，过度的抽象反而会降低代码质量。</p><p>  另外，Jsoup的代码内聚性都很高，每个类的功能基本都定义在类的内部，这是一个典型的充血模型。同时有大量的facade使用，而避免了Factory、Configure等类的出现，个人感觉这点是非常好的。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jsoup代码解读之八-防御XSS攻击&quot;&gt;&lt;a href=&quot;#Jsoup代码解读之八-防御XSS攻击&quot; class=&quot;headerlink&quot; title=&quot;Jsoup代码解读之八-防御XSS攻击&quot;&gt;&lt;/a&gt;Jsoup代码解读之八-防御XSS攻击&lt;/h2&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
      <category term="language" scheme="http://yoursite.com/categories/language/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/language/java/"/>
    
    
      <category term="javaCode" scheme="http://yoursite.com/tags/javaCode/"/>
    
  </entry>
  
  <entry>
    <title>3维运动表达</title>
    <link href="http://yoursite.com/3D_Vision_1/"/>
    <id>http://yoursite.com/3D_Vision_1/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-10-25T08:30:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3维运动表达"><a href="#3维运动表达" class="headerlink" title="3维运动表达"></a>3维运动表达</h1><hr><!-- TOC --><ul><li><a href="#3%E7%BB%B4%E8%BF%90%E5%8A%A8%E8%A1%A8%E8%BE%BE">3维运动表达</a><ul><li><a href="#chapter-2-representation-of-a-three-dimensional-moving-scene">Chapter 2 Representation of a three dimensional moving scene</a><ul><li><a href="#21-3%E7%BB%B4%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%A9%BA%E9%97%B4euclidean-space">2.1 3维欧几里得空间(Euclidean space)</a></li><li><a href="#22-%E5%88%9A%E4%BD%93%E8%BF%90%E5%8A%A8rigid-body-motion">2.2 刚体运动(Rigid body motion)</a></li><li><a href="#22-%E6%97%8B%E8%BD%AC%E8%BF%90%E5%8A%A8%E5%8F%8A%E5%85%B6%E8%A1%A8%E8%BE%BErotational-motion-and-its-representations">2.2 旋转运动及其表达(Rotational motion and its representations)</a></li></ul></li></ul></li><li><a href="#%E6%94%BE%E5%BC%83%E4%BA%86%EF%BC%8C%E5%86%99%E7%9A%84%E5%A4%AA%E7%B4%AF%E4%BA%86%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81">放弃了，写的太累了！！！！！！！！！！</a></li></ul><!-- /TOC --><h2 id="Chapter-2-Representation-of-a-three-dimensional-moving-scene"><a href="#Chapter-2-Representation-of-a-three-dimensional-moving-scene" class="headerlink" title="Chapter 2 Representation of a three dimensional moving scene"></a>Chapter 2 Representation of a three dimensional moving scene</h2><blockquote><p>本书的第二章主要讲授刚体（不发生变形）在空间中运动过程中，其当前位置与世界坐标位置（即出发前的原始坐标）之间的变换关系，刚体在空间中的运动主要可以分为位移和旋转运动，第二章将把这两个运动分开来讨论，并在其后给出统一的表达形式。</p></blockquote><h3 id="2-1-3维欧几里得空间-Euclidean-space"><a href="#2-1-3维欧几里得空间-Euclidean-space" class="headerlink" title="2.1   3维欧几里得空间(Euclidean space)"></a>2.1   3维欧几里得空间(Euclidean space)</h3><p>在起初，我们要先对一些数学符号进行一些了解：</p><p><strong>three-dimensional Euclidean space(欧几里得空间)</strong> :    $E^3$</p><p><strong>Cartesian coordinate(笛卡尔坐标)</strong>：$\mathbb{R}^3$</p><p>对于点$p \in E^3$可以用$\mathbb{R}^3$里的3个坐标来表达：$X=[X_1,X_2,X_3]^T$。这样我们就建立了$E^3$与$\mathbb{R}^3$的一一对应关系。<br>这里的内容主要是线性代数的知识，了解空间向量的表达，向量之间的 <strong>內积（inner product）、叉积（cross product）、范数（Euclidean norm）</strong> 等计算问题。<br>叉积有很多特殊的性质，考虑有两个向量$u$、$v$，这两个向量均属于$\mathbb{R}^3$。那么$u$与$v$这件的叉积可表示为：</p><p>$$u \times v = \begin{bmatrix}<br>   u_2v_3-  u_3v_2 \<br>    u_3v_1 -  u_1v_3  \<br>     u_1v_2 -  u_2v_1<br>  \end{bmatrix}  \in \mathbb{R}^3$$<br>  上式结果可以由$u^T=[u_1,u_2,u_3]=u_1 i +u_2 j +u_3 k$这种方式计算得来。</p><p>向量的內积记作：<br>$$ &lt;u,v&gt;=u^T v=u_1v_1+u_2v_2+u_3v_3 \tag{2.1} $$</p><p>我们复习一下向量叉积的性质，我们通过书本已经了解到两个向量的叉积表达的是同时垂直于两个向量的向量，且其只想符合右手定则，手指方向由运算符左边向量指向右边向量。由此可知，向量叉积结果与任一向量相互垂直，故內积为0，而且调整向量的顺序，得到的结果与调整前符号相反，即：<br>$$<u \times="" v,u=""> = <u \times="" v,v=""> = 0$$<br>$$u \times v = -v \times u$$</u></u></p><p>由$u \times v$的运算结果，考虑到：<br>$$u \times v = \begin{bmatrix}<br>   u_2v_3-  u_3v_2 \<br>    u_3v_1 -  u_1v_3  \<br>     u_1v_2 -  u_2v_1<br>  \end{bmatrix}  =<br>  \begin{bmatrix}<br>  0 &amp; -u_3 &amp; u_2 \<br>    u_3&amp;0 &amp; -u_1 \<br>     -u_2&amp; u_1&amp;0<br>  \end{bmatrix}<br>  \begin{bmatrix}<br>   v_1 \<br>      v_2\<br>      v_3<br>  \end{bmatrix}<br>  =\hat{u}v\in \mathbb{R}^3 \tag{2.2}$$<br>  上式中$\hat{u}$表示的是一个<strong>反对称矩阵(skew-symmetric matrix)</strong>,可以知道$\hat{u}^T=-\hat{u}$.我们考虑反对称矩阵$M$,则$m_{11}$=$m_{22}$=$m_{33}=0$,并且$m_{ij}=-m_{ji}$,并且$i,j$=1,2,3。假如我们另$u_1=m_{32}$,$u_2=m_{13}$,$u_3=m_{21}$，则$\hat{u}=M$。这个3维反对称矩阵只有3个自由度，即只有3个变量的值是不确定的，我们把3维反对称矩阵空间记作$so(3)$,那么我们可以得到叉积到$so(3)$的映射：<br>  $$\times : \mathbb{R} \rightarrow so(3);$$  $$u \mapsto \hat{u}$$<br>  由此也可以进行反向映射，这个过程称为“vee”，从反对称矩阵$\hat{u}$中解出向量$u$:<br>  $$ \vee : so(3) \rightarrow \mathbb{R}$$ $$ M=-M^T \mapsto M^\vee =[m_{32},m_{13},m_{21}]$$</p><blockquote><p>关键在于我们通过上述过程，将向量的叉积转换为两个矩阵相乘，且这个矩阵非常容易构造。反过来，我们也可以通过反对称矩阵来构造两个向量的叉积，这让向量之间的处理更加灵活方便。</p></blockquote><h3 id="2-2-刚体运动-Rigid-body-motion"><a href="#2-2-刚体运动-Rigid-body-motion" class="headerlink" title="2.2  刚体运动(Rigid body motion)"></a>2.2  刚体运动(Rigid body motion)</h3><p>当一个物体在相机前方运动时，此时为了描述物体的运动轨迹，原则上，需要给出物体上每个点的运动轨迹，例如给出点随时间变化的坐标函数$X(t)$。幸运的是，对于刚体而言，我们并不需要给出其上每个粒子的运动。我们指定一个点，其上带有三维坐标系，描述这个点的运动可以看作是坐标系的运动，其运动主要分为位移和旋转。很快我们就会看到，一个点就足以表达刚体的运动轨迹。</p><blockquote><p>刚体的定义：当物体运动时，其上任意两点之间的距离不随时间的变化而变化。</p></blockquote><p>假设$X(t)$和$Y(t)$是任意两点$p$和$q$各自关于时间的坐标，那它们之间的距离必然满足：<br>$$ \mid\mid X(t)-Y(t) \mid\mid = constant , \forall t \in \mathbb{R} \tag{2.3}$$<br>换句话说，如果我们定义由$p$指向$q$的向量$v$，在物体运动时，向量$v$的范数（或者说长度）保持不变：$\mid\mid v(t) \mid\mid = constant$。由此我们可以知道，刚体运动是其上每个点坐标关于时间的变换函数的集合。我们用符合$g$表示这一过程：<br>$$ g(t): \mathbb{R}^3 \rightarrow \mathbb{R}^3$$<br>$$ X \mapsto g(t)(X) $$<br>如果我们不考虑物体连续的运动路径，而只关注刚体的起始位置和终止位置，我们一般将这种变换称作<strong>刚体位移(rigid body displacement)</strong>,并把它记作单映射(single mapping)（不考虑时间的变化）:<br>$$ g: \mathbb{R}^3 \rightarrow \mathbb{R}^3$$<br>$$ X \mapsto g(X) $$<br>$g$函数除了变换坐标位置，同时也可以变换向量。假设由两个点$p$和$q$组成的向量$v$:$v=Y-X$；经过$g$变换之后，我们可以得到一个新的向量：<br>$$ g_*(v)=g(Y)-g(X)$$</p><p>$g$保留了任意两点之间的距离信息，数学表达为$\mid\mid g_*(v) \mid\mid =\mid\mid v \mid\mid ，其中\forall v \in \mathbb{R}$。</p><p>但是，保持点之间的距离不变并不是刚体运动的唯一要求。事实上，有些变换虽然满足距离不变，但是却不是物理上可实现的。例如，有如下映射关系：<br>$$ f: [X_1,X_2,X_3]^T \mapsto [X_1,X_2,-X_3]^T$$<br>其保证了距离不变，但是方向变了，其映射关系是关于$XY$平面对称。为了排除向上述那样的映射，我们要求对于刚体运动，不仅要保证<strong>距离(distance)</strong>，同时也要保证<strong>方向(orientation)</strong>。也就是说保持向量的距离（范数）之外，必须保证它们之间的叉积不变。对于刚体运动的坐标变换也称作<strong>special Euclidean transformation</strong>。单词<strong>special</strong>象征着<strong>orientation-preserving</strong>（也就是维持刚体上向量的方向）。</p><blockquote><p><strong>定义2.3 （Rigid body motion or special Euclidean transformation).</strong> 如果一个映射$g : \mathbb{R}^3 \rightarrow \mathbb{R}^3$,满足其上任意向量的范数和任意两向量之间的叉积不变，那么他就是刚体运动或者特殊欧几里得变换。<br><br>A mapping $g : \mathbb{R}^3 \rightarrow \mathbb{R}^3$ is a rigid body motion or special Euclidean transformation if it preserves the norm and the cross product of any two vectors.</p></blockquote><ul><li>1.范数:$\mid\mid g_*(v) \mid\mid =\mid\mid v \mid\mid ，其中\forall v \in \mathbb{R}$.</li><li>2.叉积:$g_<em>(u) \times g_</em>(v) =g_<em>(u \times v) ，\forall u,v \in \mathbb{R}^3$<br><br><br>在上面刚体运动的定义中，严格要求了点之间的距离不变，那向量之间的角度保证不变了吗？虽然这没有在定义中严格的陈述，从向量的内积（点积）$&lt;.,.&gt;$可以看出向量之间的角度确实得到了保证，因为内积可以通过 <strong>极化特性(polarization identity)</strong> 以范数的形式表达：<br>$$&lt;u,v&gt;=u^T v=u_1v_1+u_2v_2+u_3v_3 \<br>= \frac{1}{4}( \mid\mid u+v \mid\mid^2 - \mid\mid u-v \mid\mid^2 )   \<br>=( u_1+v_1 )^2+( u_2+v_2 )^2+( u_3+v_3 )^2-( u_1-v_1 )^2-( u_2-v_2 )^2-( u_3-v_3 )^2 \tag{2.4}$$<br>由此，对于任何刚体运动$g$，有：<br>$$ u^T v=g_</em>(u) g_*(v) ,\forall u,v \in \mathbb{R}^3 \tag{2.5}$$<blockquote><p>换句话说，刚体运动也可以定义为既可以保证任意两向量的内积不变，同时也可以保证叉积不变。</p></blockquote></li></ul><p>那么刚体运动的这些性质有什么用呢？实际上刚体运动的距离以及方向维持特性意味着其上各点之间不能相对对方运动，但是点与点之间在空间可以旋转（这里不太好描述，想象一个运动的固体块，显然，其上任意两点可以相对于对方旋转，但是不可能相对于对方存在距离变化），但是这个旋转必须是正确的，不能改变任意点之间的距离。</p><blockquote><p>因此，刚体运动可以描述为任意一个点的运动，以及附着在这个点上的坐标系的旋转。</p></blockquote><p>基于以上讨论，我们可以在刚体的某点设立一个笛卡尔坐标系，并在刚体运动的起始位置设定一个固定的坐标系（也就是常说的世界坐标系），记录起始时刚体上某点在世界坐标系中的坐标，以及点上面附着的笛卡尔坐标系与世界坐标系之间的关系，在刚体运动过程中，保持追踪运动坐标系与世界坐标系之间的相对关系。</p><p>为了方便描述，考虑世界坐标系由3个正交向量$e_1,e_2,e_3 \in \mathbb{R}^3$组成。正交向量满足：<br>$$e_i^Te_j=\delta_{ij}\begin{cases} \delta_{ij}=1,\ for\ i=j<br>  \\delta_{ij}=0 ,\ for \ i \neq j<br>\end{cases} \tag{2.6}$$<br>通常，这些向量组成右手系：$e_1 \times e_2 = e_3$。然后，经过刚体运动$g$，我们得到：<br>$$ g_<em>(e_i) g_</em>(e_j)=\delta_{ij} ,\ \ g_<em>(e_1)\times g_</em>(e_2)=g_*(e_3) \tag{2.7}$$<br>通过上面的运算我们可以发现，计算过后的向量仍然构成右手正交系，所以对于刚体运动，可以看作一个右手正交坐标系相对于世界坐标系的运动，这里我们把这个坐标系称作 <strong>对象系（object frame）</strong>。在图2.1中我们将会看到一个物体（图中为相机）相对于世界坐标系$W$的运动。将对象坐标系附着在起点$o$上，这里的相机的坐标系用字母$C$表示，其随着相机的运动而运动。那么此时相机在空间中的位置可以由以下两部分决定：</p><ul><li>(1) 世界坐标系原点$o$与相机坐标系原点$g(o)$之间形成的向量，我们称之为移位（translational）部分并标记为$T$。</li><li>(2) 相机坐标系$C$的坐标轴$g_<em>(e_1),g_</em>(e_2),g_*(e_3)$相对于世界坐标系$W$的坐标轴$e_1,e_2,e_3$的方向，我们称之为旋转（rotational）部分并标记为$R$。</li></ul><p>实际上，在视觉上没有明显的起点$o$和参考坐标系$e_1,e_2,e_3$，你可以想象相机不动，而场景在空间运动，也可以指定场景不动，相机在空间运动，这些都不重要，只要能够表达出两者之间的相对位置关系，方便理解即可。</p><blockquote><p><strong>Remark 2.1</strong>. <em>The set of rigid body motions, or special Euclidean transformations, is a (Lie) group, the so-called special Euclidean group, typically<br>denoted as $SE(3)$. Algebraically, a group is a set $G$, with an operation of (binary) multiplication $\circ$ on elements of G which is</em>:</p><ul><li>closed: If $g1, g2 \in G$ then also $g1 \circ g2 \in G$;</li><li>associative: $(g1 \circ g2) \circ g3 = g1 \circ (g2 \circ g3)$, for all $g1, g2, g3 \in G$;</li><li>unit element $e: e \circ g = g \circ e = g$, for all $g \in G$;</li><li>invertible: For every element $g \in G$, there exists an element $g−1 ∈ G$ such that $g \circ g^{−1} = g^{−1} \circ g = e$.</li></ul></blockquote><p>在后面的内容中，我们将会研究如何表达特殊欧几里得集合(special Euclidean group)$SE(3)$。再具体一点来说，就是实现将$SE(3)$中的元素作为一个$n \times n$非奇异矩阵的元素，那么乘法运算可以简化为矩阵的乘法运算，这样的矩阵集合一般叫做一般线性集(general linear group)并且记作$GL(n)$。<br>$$ \mathcal{R} : SE(3) \rightarrow GL(n) $$<br>$$ g \mapsto \mathcal{R}(g)$$</p><p>反过来，也可以得到：<br>$$ \mathcal{R}(g^{-1})=\mathcal{R}(g)^{-1} ,\ \mathcal{R}(g \circ h)=\mathcal{R}(g)\mathcal{R}(h),\ \forall g,h \in SE(3). \tag{2.8}$$</p><p><img src="\images\Fig2_1.png" alt="avatar"></p><h3 id="2-2-旋转运动及其表达-Rotational-motion-and-its-representations"><a href="#2-2-旋转运动及其表达-Rotational-motion-and-its-representations" class="headerlink" title="2.2  旋转运动及其表达(Rotational motion and its representations)"></a>2.2  旋转运动及其表达(Rotational motion and its representations)</h3><p>如果我们只考虑旋转，那么相对于世界坐标系$W$，对象坐标系$C$的原点$o$与世界坐标系重合，只是坐标轴发生了偏移，如图2.2所示。</p><p><img src="\images\Fig_2.2.png" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;3维运动表达&quot;&gt;&lt;a href=&quot;#3维运动表达&quot; class=&quot;headerlink&quot; title=&quot;3维运动表达&quot;&gt;&lt;/a&gt;3维运动表达&lt;/h1&gt;&lt;hr&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#3%E7%BB%B4%E8%BF%90%
      
    
    </summary>
    
      <category term="language" scheme="http://yoursite.com/categories/language/"/>
    
      <category term="c++" scheme="http://yoursite.com/categories/language/c/"/>
    
    
      <category term="math" scheme="http://yoursite.com/tags/math/"/>
    
  </entry>
  
</feed>
